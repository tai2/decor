{"defaultHtml":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <h1 data-decor-element=\"heading1\">Block Elements</h1>\n    <p>\n      Markdown[9] is a lightweight markup language for creating formatted text\n      using a plain-text editor. John Gruber created Markdown in 2004 as a\n      markup language that is easy to read in its source code form.[9] Markdown\n      is widely used for blogging and instant messaging, and also used elsewhere\n      in online forums, collaborative software, documentation pages, and readme\n      files.\n    </p>\n    <h2 data-decor-element=\"heading2\">A Second Level Header</h2>\n    <p>\n      The initial description of Markdown[10] contained ambiguities and raised\n      unanswered questions, causing implementations to both intentionally and\n      accidentally diverge from the original version. This was addressed in 2014\n      when long-standing Markdown contributors released CommonMark, an\n      unambiguous specification and test suite for Markdown.[11]\n    </p>\n    <h3 data-decor-element=\"heading3\">A Third Level Header</h3>\n    <p>\n      Markdown was inspired by pre-existing conventions for marking up plain\n      text in email and usenet posts, such as the earlier markup languages\n      setext (c. 1992), Textile (c. 2002), and reStructuredText (c. 2002).[\n    </p>\n    <h4 data-decor-element=\"heading4\">A Forth Level Header</h4>\n    <p>\n      In 2002 Aaron Swartz created atx and referred to it as \"the true\n      structured text format\". Gruber created the Markdown language in 2004,\n      with Swartz acting as beta tester,[3][4] with the goal of enabling people\n      \"to write using an easy-to-read and easy-to-write plain text format,\n      optionally convert it to structurally valid XHTML (or HTML).\"[5]\n    </p>\n    <h5 data-decor-element=\"heading5\">A Fifth Level Header</h5>\n    <p>\n      Its key design goal was readability, that the language be readable as-is,\n      without looking like it has been marked up with tags or formatting\n      instructions,[9] unlike text formatted with 'heavier' markup languages,\n      such as Rich Text Format (RTF), HTML, or even wikitext (each of which have\n      obvious in-line tags and formatting instructions which can make the text\n      more difficult for humans to read).\n    </p>\n    <h6 data-decor-element=\"heading6\">A Sixth Level Header</h6>\n    <p>\n      Gruber wrote a Perl script, Markdown.pl, which converts marked-up text\n      input to valid, well-formed XHTML or HTML and replaces angle brackets (<,\n      >) and ampersands (&) with their corresponding character entity\n      references. It can take the role of a standalone script, a plugin for\n      Blosxom or a Movable Type, or of a text filter for BBEdit.[5]\n    </p>\n\n    <h2>Paragraph</h2>\n    <p data-decor-element=\"paragraph\">\n      Alice was beginning to get very tired of sitting by her sister on the\n      bank, and of having nothing to do: once or twice she had peeped into the\n      book her sister was reading, but it had no pictures or conversations in\n      it, “and what is the use of a book,” thought Alice “without pictures or\n      conversations?”\n    </p>\n    <p>\n      So she was considering in her own mind (as well as she could, for the hot\n      day made her feel very sleepy and stupid), whether the pleasure of making\n      a daisy-chain would be worth the trouble of getting up and picking the\n      daisies, when suddenly a White Rabbit with pink eyes ran close by her.\n    </p>\n\n    <h2>Code Block</h2>\n    <pre\n      data-decor-element=\"code_block\"\n    ><code data-decor-content=\"content\" data-decor-attribute-data-lang=\"infoString\">for (var i = 1; i &lt; 101; i++) {\n    if (i % 15 == 0) console.log(&quot;FizzBuzz&quot;);\n    else if (i % 3 == 0) console.log(&quot;Fizz&quot;);\n    else if (i % 5 == 0) console.log(&quot;Buzz&quot;);\n    else console.log(i);\n}</code></pre>\n\n    <h2>Table</h2>\n\n    <table data-decor-element=\"table\">\n      <thead data-decor-content=\"header\">\n        <tr data-decor-element=\"table_header\">\n          <th data-decor-element=\"table_header_cell\">Library</th>\n          <th>Language</th>\n          <th>Parser</th>\n          <th>Renderer</th>\n          <th>Extensions</th>\n          <th>Plugins</th>\n          <th>License</th>\n        </tr>\n      </thead>\n      <tbody data-decor-content=\"body\">\n        <tr data-decor-element=\"table_row\">\n          <td data-decor-element=\"table_row_cell\">Marked</td>\n          <td>JavaScript</td>\n          <td>Custom</td>\n          <td>Custom</td>\n          <td>GitHub Flavored Markdown</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n        <tr>\n          <td>Remark</td>\n          <td>JavaScript</td>\n          <td>Unified</td>\n          <td>Custom</td>\n          <td>CommonMark, GitHub Flavored Markdown, others</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n        <tr>\n          <td>Markdown-it</td>\n          <td>JavaScript</td>\n          <td>Custom</td>\n          <td>Custom</td>\n          <td>CommonMark, GitHub Flavored Markdown, others</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h2>List</h2>\n    <ul data-decor-element=\"unordered_list\">\n      <li data-decor-element=\"unordered_list_item\">List Item 1</li>\n      <li>List Item 2</li>\n      <li>List Item 3</li>\n    </ul>\n    <ol data-decor-element=\"ordered_list\">\n      <li data-decor-element=\"ordered_list_item\">List Item 1</li>\n      <li>List Item 2</li>\n      <li>List Item 3</li>\n    </ol>\n\n    <h2>Block Quote</h2>\n    <blockquote data-decor-element=\"block_quote\">\n      <p>\n        Words can be like X-rays, if you use them properly—they’ll go through\n        anything. You read and you’re pierced.\n      </p>\n    </blockquote>\n\n    <h2>Thematic break</h2>\n    <hr data-decor-element=\"thematic_break\" />\n\n    <h1>Inline Elements</h1>\n\n    <h2>Link</h2>\n    <p>\n      This is\n      <a data-decor-element=\"link\" href=\"http://example.com/\">an example</a>\n      inline link.\n    </p>\n\n    <h2>Image</h2>\n    <p>\n      <img\n        data-decor-element=\"image\"\n        width=\"300px\"\n        src=\"https://raw.githubusercontent.com/tai2/decor/main/content/sample-5.jpg\"\n        alt=\"sample image\"\n      />\n    </p>\n\n    <h2>Video</h2>\n    <video data-decor-element=\"video\" controls width=\"300px\">\n      <source\n        data-decor-attribute-src=\"url\"\n        src=\"https://raw.githubusercontent.com/tai2/decor/main/content/sample-5s.mp4\"\n      />\n      <a data-decor-attribute-href=\"url\" data-decor-content=\"description\"\n        >link text</a\n      >\n    </video>\n\n    <h2>Code Span</h2>\n    <p>\n      Use <code data-decor-element=\"code_span\">status</code> to list all new or\n      modified files that haven't yet been committed.\n    </p>\n\n    <h2>Emphasis</h2>\n    <p>\n      Some of these words <em data-decor-element=\"emphasis\">are emphasized</em>.\n      Some of these words <em>are emphasized also</em>.\n    </p>\n    <p>\n      Use two asterisks for\n      <strong data-decor-element=\"strong_emphasis\">strong emphasis</strong>. Or,\n      if you prefer, <strong>use two underscores instead</strong>.\n    </p>\n\n    <h2>Strikethrough</h2>\n    <p>\n      <del data-decor-element=\"strikethrough\">Hi</del> Hello,\n      <del>there</del> world!\n    </p>\n\n    <h2>Hard line break</h2>\n    <p>\n      foo<br data-decor-element=\"hard_line_break\" />\n      baz\n    </p>\n  </body>\n</html>\n"}