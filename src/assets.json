{
  "defaultTemplate": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Decor default template</title>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <h1 data-decor-element=\"heading1\">Block Elements</h1>\n    <p>\n      Markdown[9] is a lightweight markup language for creating formatted text\n      using a plain-text editor. John Gruber created Markdown in 2004 as a\n      markup language that is easy to read in its source code form.[9] Markdown\n      is widely used for blogging and instant messaging, and also used elsewhere\n      in online forums, collaborative software, documentation pages, and readme\n      files.\n    </p>\n    <h2 data-decor-element=\"heading2\">A Second Level Header</h2>\n    <p>\n      The initial description of Markdown[10] contained ambiguities and raised\n      unanswered questions, causing implementations to both intentionally and\n      accidentally diverge from the original version. This was addressed in 2014\n      when long-standing Markdown contributors released CommonMark, an\n      unambiguous specification and test suite for Markdown.[11]\n    </p>\n    <h3 data-decor-element=\"heading3\">A Third Level Header</h3>\n    <p>\n      Markdown was inspired by pre-existing conventions for marking up plain\n      text in email and usenet posts, such as the earlier markup languages\n      setext (c. 1992), Textile (c. 2002), and reStructuredText (c. 2002).[\n    </p>\n    <h4 data-decor-element=\"heading4\">A Forth Level Header</h4>\n    <p>\n      In 2002 Aaron Swartz created atx and referred to it as \"the true\n      structured text format\". Gruber created the Markdown language in 2004,\n      with Swartz acting as beta tester,[3][4] with the goal of enabling people\n      \"to write using an easy-to-read and easy-to-write plain text format,\n      optionally convert it to structurally valid XHTML (or HTML).\"[5]\n    </p>\n    <h5 data-decor-element=\"heading5\">A Fifth Level Header</h5>\n    <p>\n      Its key design goal was readability, that the language be readable as-is,\n      without looking like it has been marked up with tags or formatting\n      instructions,[9] unlike text formatted with 'heavier' markup languages,\n      such as Rich Text Format (RTF), HTML, or even wikitext (each of which have\n      obvious in-line tags and formatting instructions which can make the text\n      more difficult for humans to read).\n    </p>\n    <h6 data-decor-element=\"heading6\">A Sixth Level Header</h6>\n    <p>\n      Gruber wrote a Perl script, Markdown.pl, which converts marked-up text\n      input to valid, well-formed XHTML or HTML and replaces angle brackets (<,\n      >) and ampersands (&) with their corresponding character entity\n      references. It can take the role of a standalone script, a plugin for\n      Blosxom or a Movable Type, or of a text filter for BBEdit.[5]\n    </p>\n\n    <h2>Paragraph</h2>\n    <p data-decor-element=\"paragraph\">\n      Alice was beginning to get very tired of sitting by her sister on the\n      bank, and of having nothing to do: once or twice she had peeped into the\n      book her sister was reading, but it had no pictures or conversations in\n      it, “and what is the use of a book,” thought Alice “without pictures or\n      conversations?”\n    </p>\n    <p>\n      So she was considering in her own mind (as well as she could, for the hot\n      day made her feel very sleepy and stupid), whether the pleasure of making\n      a daisy-chain would be worth the trouble of getting up and picking the\n      daisies, when suddenly a White Rabbit with pink eyes ran close by her.\n    </p>\n\n    <h2>Code Block</h2>\n    <pre\n      data-decor-element=\"code_block\"\n    ><code data-decor-content=\"content\" data-decor-attribute-data-lang=\"infoString\">for (var i = 1; i &lt; 101; i++) {\n    if (i % 15 == 0) console.log(&quot;FizzBuzz&quot;);\n    else if (i % 3 == 0) console.log(&quot;Fizz&quot;);\n    else if (i % 5 == 0) console.log(&quot;Buzz&quot;);\n    else console.log(i);\n}</code></pre>\n\n    <h2>Table</h2>\n\n    <table data-decor-element=\"table\">\n      <thead data-decor-content=\"header\">\n        <tr data-decor-element=\"table_header\">\n          <th data-decor-element=\"table_header_cell\">Library</th>\n          <th>Language</th>\n          <th>Parser</th>\n          <th>Renderer</th>\n          <th>Extensions</th>\n          <th>Plugins</th>\n          <th>License</th>\n        </tr>\n      </thead>\n      <tbody data-decor-content=\"body\">\n        <tr data-decor-element=\"table_row\">\n          <td data-decor-element=\"table_row_cell\">Marked</td>\n          <td>JavaScript</td>\n          <td>Custom</td>\n          <td>Custom</td>\n          <td>GitHub Flavored Markdown</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n        <tr>\n          <td>Remark</td>\n          <td>JavaScript</td>\n          <td>Unified</td>\n          <td>Custom</td>\n          <td>CommonMark, GitHub Flavored Markdown, others</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n        <tr>\n          <td>Markdown-it</td>\n          <td>JavaScript</td>\n          <td>Custom</td>\n          <td>Custom</td>\n          <td>CommonMark, GitHub Flavored Markdown, others</td>\n          <td>Yes</td>\n          <td>MIT</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h2>List</h2>\n    <ul data-decor-element=\"unordered_list\">\n      <li data-decor-element=\"unordered_list_item\">List Item 1</li>\n      <li>List Item 2</li>\n      <li>List Item 3</li>\n    </ul>\n    <ol data-decor-element=\"ordered_list\">\n      <li data-decor-element=\"ordered_list_item\">List Item 1</li>\n      <li>List Item 2</li>\n      <li>List Item 3</li>\n    </ol>\n\n    <h2>Block Quote</h2>\n    <blockquote data-decor-element=\"block_quote\">\n      <p>\n        Words can be like X-rays, if you use them properly—they’ll go through\n        anything. You read and you’re pierced.\n      </p>\n    </blockquote>\n\n    <h2>Thematic break</h2>\n    <hr data-decor-element=\"thematic_break\" />\n\n    <h1>Inline Elements</h1>\n\n    <h2>Link</h2>\n    <p>\n      This is\n      <a data-decor-element=\"link\" href=\"http://example.com/\">an example</a>\n      inline link.\n    </p>\n\n    <h2>Image</h2>\n    <p>\n      <img\n        data-decor-element=\"image\"\n        width=\"300px\"\n        src=\"https://raw.githubusercontent.com/tai2/decor/main/contents/sample-5.jpg\"\n        alt=\"sample image\"\n      />\n    </p>\n\n    <h2>Video</h2>\n    <video data-decor-element=\"video\" controls width=\"300px\">\n      <source\n        data-decor-attribute-src=\"url\"\n        src=\"https://raw.githubusercontent.com/tai2/decor/main/contents/sample-5s.mp4\"\n      />\n      <a data-decor-attribute-href=\"url\" data-decor-content=\"description\"\n        >link text</a\n      >\n    </video>\n\n    <h2>Code Span</h2>\n    <p>\n      Use <code data-decor-element=\"code_span\">status</code> to list all new or\n      modified files that haven't yet been committed.\n    </p>\n\n    <h2>Emphasis</h2>\n    <p>\n      Some of these words <em data-decor-element=\"emphasis\">are emphasized</em>.\n      Some of these words <em>are emphasized also</em>.\n    </p>\n    <p>\n      Use two asterisks for\n      <strong data-decor-element=\"strong_emphasis\">strong emphasis</strong>. Or,\n      if you prefer, <strong>use two underscores instead</strong>.\n    </p>\n\n    <h2>Strikethrough</h2>\n    <p>\n      <del data-decor-element=\"strikethrough\">Hi</del> Hello,\n      <del>there</del> world!\n    </p>\n\n    <h2>Hard line break</h2>\n    <p>\n      foo<br data-decor-element=\"hard_line_break\" />\n      baz\n    </p>\n  </body>\n</html>\n",
  "defaultContent": "# Inline elements showcase\n\nMarkdown offers a lot of different inline elements. Here are some examples: **bold text**, _italic text_, `code`, ~~strikethrough~~, [links](https://www.markdownguide.org/ \"markdown guide\"), and images.\n\nOver hill, over dale,  \nThorough bush, thorough brier,  \nOver park, over pale,  \nThorough flood, thorough fire!  \nI do wander everywhere,  \nSwifter than the moon's sphere;  \nAnd I serve the Fairy Queen,  \nTo dew her orbs upon the green;  \nThe cowslips tall her pensioners be;  \nIn their gold coats spots you see;  \nThose be rubies, fairy favours;  \nIn those freckles live their savours;  \nI must go seek some dewdrops here,  \nAnd hang a pearl in every cowslip's ear.\n\n-- William Shakespeare\n\n# Table showcase\n\n| Name       | Description         | Country  |                              Ingriedients |\n| ---------- | :------------------ | :------: | ----------------------------------------: |\n| Pot-au-feu | A French beef stew. |  France  |                          Beef, vegetables |\n| Bigos      | A Polish stew.      |  Poland  |                             Meat, cabbage |\n| Goulash    | A Hungarian stew.   | Hungary  |                             Beef, paprika |\n| Borscht    | A Ukrainian stew.   | Ukraine  |                                  Beetroot |\n| Haggis     | A Scottish stew.    | Scotland |            Sheep's heart, liver and lungs |\n| Irish stew | An Irish stew.      | Ireland  | Lamb or mutton, potatoes, onions, carrots |\n\n# Lists showcase\n\n[The 12 Principles behind the Agile Manifesto](https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/)\n\n- Our highest priority is to satisfy the customer through the early and\n  continuous delivery of valuable software.\n- Welcome changing requirements, even late in development. Agile processes\n  harness change for the customer’s competitive advantage.\n- Deliver working software frequently, from a couple of weeks to a couple of\n  months, with a preference to the shorter timescale.\n- Business people and developers must work together daily throughout the\n  project.\n- Build projects around motivated individuals. Give them the environment and\n  support they need, and trust them to get the job done.\n- The most efficient and effective method of conveying information to and within\n  a development team is face-to-face conversation.\n- Working software is the primary measure of progress.\n- Agile processes promote sustainable development. The sponsors, developers, and\n  users should be able to maintain a constant pace indefinitely.\n- Continuous attention to technical excellence and good design enhances agility.\n- Simplicity–the art of maximizing the amount of work not done–is essential.\n- The best architectures, requirements, and designs emerge from self-organizing\n  teams.\n- At regular intervals, the team reflects on how to become more effective, then\n  tunes and adjusts its behavior accordingly.\n\n[Seven Principles of Software Testing](https://se.inf.ethz.ch/~meyer/publications/testing/principles.pdf)\nby Bertrand Meyer\n\n1. Definition\n   - To test a program is to try to make it fail.\n2. Tests versus specs\n   - Tests are no substitute for specifications.\n3. Regression testing\n   - Any failed execution must yield a test case, to remain a permanent part of\n     the project’s test suite.\n4. Applying oracles\n   - Determining success or failure of tests must be an automatic process.\n5. Manual and automatic test cases\n   - An effective testing process must include both manually and automatically\n     produced test cases.\n6. Empirical assessment of testing strategies\n   - Evaluate any testing strategy, however attractive in principle, through\n     objective assessment using explicit criteria in a reproducible testing\n     process.\n7. Assessment criteria\n   - A testing strategy’s most important property is the number of faults it\n     uncovers as a function of time.\n\n# Block quote showcase\n\n> No amount of evidence will ever persuade an idiot\n>\n> -- Mark Twain\n\n---\n\nSubject: Re: Team Meeting Rescheduled\n\nHi All,\n\nRegarding the rescheduling of our team meeting, I agree with Jenna's suggestion to move it to Thursday.\n\n> On Tue, Oct 10, 2023 at 4:15 PM, Jenna wrote:\n>\n> > Hi Team,\n> >\n> > Considering the upcoming public holiday on Friday, I suggest we move our weekly team meeting to Thursday at the same time. What do you all think?\n> >\n> > > On Tue, Oct 10, 2023 at 3:00 PM, Mark wrote:\n> > >\n> > > > Hi All,\n> > > >\n> > > > Reminder: Our weekly team meeting is scheduled for this Friday. Please be prepared to update the team on your weekly progress.\n> > > >\n> > > > Best,\n> > > > Mark\n\nHowever, I would like to propose that we move the time from 3:00 PM to 1:00 PM to accommodate the marketing team's availability.\n\n> On Tue, Oct 10, 2023 at 4:30 PM, Raj wrote:\n>\n> > I second Jenna's suggestion but prefer to keep it at the original time since the marketing team has a conflict at that time.\n\nRaj, do you think the marketing team can shuffle their commitments to adjust to this one-off change, or should we consider an alternative time?\n\nLooking forward to hearing everyone's thoughts.\n\nBest,\nAmy\n\n# Code block showcase\n\n```javascript\nconst controller = new AbortController();\nconst signal = controller.signal;\nconst url = \"video.mp4\";\n\nconst downloadBtn = document.querySelector(\"#download\");\nconst abortBtn = document.querySelector(\"#abort\");\n\ndownloadBtn.addEventListener(\"click\", async () => {\n  try {\n    const response = await fetch(url, { signal });\n    console.log(\"Download complete\", response);\n  } catch (error) {\n    console.error(`Download error: ${error.message}`);\n  }\n});\n\nabortBtn.addEventListener(\"click\", () => {\n  controller.abort();\n  console.log(\"Download aborted\");\n});\n```\n\n# Image showcase\n\n![Wet glass with a lot of red and white lights behind](https://raw.githubusercontent.com/tai2/decor/main/contents/sample-5.jpg \"This is an example image\")\n\n![Scenery with green trees and cars passing through](https://raw.githubusercontent.com/tai2/decor/main/contents/sample-5s.mp4 \"This is an example video\")\n\n# Headings showcase\n\n## Markdown\n\n_Markdown_ is a\n[lightweight markup language](https://en.wikipedia.org/wiki/Lightweight_markup_language \"Link to the\nLightweight markup language on Wikipedia\")\nfor creating formatted text using a plain-text editor. John Gruber created\nMarkdown in 2004 as a markup language that is easy to read in its source code\nform. Markdown is widely used for blogging and instant messaging, and also used\nelsewhere in online forums, collaborative software, documentation pages, and\nreadme files.\n\nThe initial description of Markdown contained ambiguities and raised unanswered\nquestions, causing implementations to both intentionally and accidentally\ndiverge from the original version. This was addressed in 2014 when long-standing\nMarkdown contributors released CommonMark, an unambiguous specification and test\nsuite for Markdown.\n\n### History\n\nMarkdown was inspired by pre-existing conventions for marking up plain text in\nemail and usenet posts, such as the earlier markup languages setext (c. 1992),\nTextile (c. 2002), and reStructuredText (c. 2002).\n\nIn 2002 Aaron Swartz created atx and referred to it as \"the true structured text\nformat\". Gruber created the Markdown language in 2004, with Swartz acting as\nbeta tester, with the goal of enabling people \"to write using an easy-to-read\nand easy-to-write plain text format, optionally convert it to structurally valid\nXHTML (or HTML).\"\n\nIts key design goal was readability, that the language be readable as-is,\nwithout looking like it has been marked up with tags or formatting instructions,\nunlike text formatted with 'heavier' markup languages, such as Rich Text Format\n(RTF), HTML, or even wikitext (each of which have obvious in-line tags and\nformatting instructions which can make the text more difficult for humans to\nread).\n\nGruber wrote a Perl script, `Markdown.pl`, which converts marked-up text input\nto valid, well-formed XHTML or HTML and replaces angle brackets (`<`, `>`) and\nampersands (`&`) with their corresponding character entity references. It can\ntake the role of a standalone script, a plugin for Blosxom or a Movable Type, or\nof a text filter for BBEdit.\n\n#### Rise and divergence\n\nAs Markdown's popularity grew rapidly, many Markdown implementations appeared,\ndriven mostly by the need for additional features such as tables, footnotes,\ndefinition lists, and Markdown inside HTML blocks.\n\nThe behavior of some of these diverged from the reference implementation, as\nMarkdown was only characterised by an informal specification and a Perl\nimplementation for conversion to HTML.\n\nAt the same time, a number of ambiguities in the informal specification had\nattracted attention. These issues spurred the creation of tools such as\nBabelmark to compare the output of various implementations, and an effort by\nsome developers of Markdown parsers for standardisation. However, Gruber has\nargued that complete standardization would be a mistake: \"Different sites (and\npeople) have different needs. No one syntax would make all happy.\"\n\nGruber avoided using curly braces in Markdown to unofficially reserve them for\nimplementation-specific extensions.\n\n##### Standardization\n\nFrom 2012, a group of people, including Jeff Atwood and John MacFarlane,\nlaunched what Atwood characterised as a standardisation effort. A community\nwebsite now aims to \"document various tools and resources available to document\nauthors and developers, as well as implementors of the various Markdown\nimplementations\". In September 2014, Gruber objected to the usage of \"Markdown\"\nin the name of this effort and it was rebranded as CommonMark. CommonMark.org\npublished several versions of a specification, reference implementation, test\nsuite, and \" to announce a finalized 1.0 spec and test suite in 2019.\" No 1.0\nspec has since been released as major issues still remain unsolved. Nonetheless,\nthe following websites and projects have adopted CommonMark: Discourse, GitHub,\nGitLab, Reddit, Qt, Stack Exchange (Stack Overflow), and Swift.\n\nIn March 2016 two relevant informational Internet RFCs were published:\n\n- RFC [7763](https://datatracker.ietf.org/doc/html/rfc7763) introduced MIME type\n  text/markdown.\n- RFC [7764](https://datatracker.ietf.org/doc/html/rfc7764) discussed and\n  registered the variants MultiMarkdown, GitHub Flavored Markdown (GFM), Pandoc,\n  and Markdown Extra among others.\n\n###### Variants\n\nWebsites like Bitbucket, Diaspora, GitHub, OpenStreetMap, Reddit, SourceForge,\nand Stack Exchange use variants of Markdown to make discussions between users\neasier.\n\nDepending on implementation, basic inline HTML tags may be supported. Italic\ntext may be implemented by `_underscores_` and/or `*single-asterisks*`.\n",
  "helpText": "Usage : decor [options] [--template template.html] [content_file]\n    Generate a rendered HTML and output it\n    --help : Show help.\n    --template : Template file. If omitted, the default template is used.\n    --watch : Run decor in watch mode. It detects updates for the template and content then emits the output.\n    --output : Output filename. When omitted, output is emitted to the standard output.\n    --show-default-template : Emit the default template. You can use it as a starting point of your own template."
}
